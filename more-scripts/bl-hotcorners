#!/usr/bin/python3
#
#    bl-hotcorners: a script for adding hot corners to Openbox.
#    Copyright (C) 2012 Philip Newborough   <corenominal@corenominal.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#    Renamed for BunsenLabs

# edited by tony fischetti to make compatible with python 3
# and small tweaks for latency/performance

from Xlib import display
from Xlib.ext.xtest import fake_input
from Xlib import X
from subprocess import Popen, PIPE, STDOUT
import sys, time, os, configparser, re
import argparse

# parameters
check_interval  = 0.1   # was 0.2
second_sleep    = 0.1   # was 0.2

ap = argparse.ArgumentParser(description="Hotcorners")
# ap.add_argument("-k", "--kill", help="attempt to kill any runnng instances",
#             action="store_true")
ap.add_argument("-d", "--daemon", help="run daemon and listen for cursor triggers",
            action="store_true")
opts = ap.parse_args(sys.argv[1:])

p = Popen(['xdotool','getdisplaygeometry'], stdout=PIPE, stderr=STDOUT)
Dimensions = p.communicate()
Dimensions = Dimensions[0].decode("utf-8").replace('\n', '')
Dimensions = Dimensions.split(' ')
width = int(Dimensions[0])
height = int(Dimensions[1])
hw = width / 2
rt = width - 1
bt = height - 1

# if opts.kill:
#     print("Attempting to kill any running instances...")
#     os.system('pkill -9 -f bl-hotcorners')
#     exit()

if opts.daemon:
    Config = configparser.ConfigParser()
    cfgdir = os.getenv("HOME")+"/.config/bl-hotcorners"
    rcfile = cfgdir+"/bl-hotcornersrc"
    bounce = 40
    disp = display.Display()
    root=display.Display().screen().root

    def mousepos():
        data = root.query_pointer()._data
        return data["root_x"], data["root_y"], data["mask"]

    def mousemove(x, y):
        fake_input(disp, X.MotionNotify, x=x, y=y)
        disp.sync()

    try:
        cfgfile = open(rcfile)
    except IOError as e:
        if not os.path.exists(cfgdir):
            os.makedirs(cfgdir)
        cfgfile = open(rcfile,'w')
        Config.add_section('Hot Corners')
        Config.set('Hot Corners','top_left_corner_command', '')
        Config.set('Hot Corners','top_right_corner_command', '')
        Config.set('Hot Corners','bottom_left_corner_command', '')
        Config.set('Hot Corners','bottom_right_corner_command', '')
        Config.write(cfgfile)
        cfgfile.close()

    # read only once
    Config.read(rcfile)

    TOP_LEFT_COMMAND     = Config.get('Hot Corners','top_left_corner_command')
    TOP_RIGHT_COMMAND    = Config.get('Hot Corners','top_right_corner_command')
    BOTTOM_LEFT_COMMAND  = Config.get('Hot Corners','bottom_left_corner_command')
    BOTTOM_RIGHT_COMMAND = Config.get('Hot Corners','bottom_right_corner_command')

    while True:
        time.sleep(check_interval)
        pos = mousepos()

        if pos[1] == 0:
            if pos[0] == 0:
                if TOP_LEFT_COMMAND:
                    time.sleep(second_sleep)
                    pos = mousepos()
                    if pos[0] == 0 and pos[1] == 0:
                        mousemove(pos[0] + bounce, pos[1] + bounce)
                        os.system("({}) &".format(TOP_LEFT_COMMAND))
                        mousemove(pos[0] + bounce, pos[1] + bounce)
                        time.sleep(2)

            elif pos[0] == rt:
                if TOP_RIGHT_COMMAND:
                    time.sleep(second_sleep)
                    pos = mousepos()
                    if pos[0] == rt and pos[1] == 0 :
                        mousemove(pos[0] - bounce, pos[1] + bounce)
                        os.system("({}) &".format(TOP_RIGHT_COMMAND))
                        mousemove(pos[0] - bounce, pos[1] + bounce)
                        time.sleep(2)

        if pos[1] == bt:
            if pos[0] == 0:
                if BOTTOM_LEFT_COMMAND:
                    time.sleep(second_sleep)
                    pos = mousepos()
                    if pos[0] == 0 and pos[1] == bt:
                        mousemove(pos[0] + bounce, pos[1] - bounce)
                        os.system("({}) &".format(BOTTOM_LEFT_COMMAND))
                        mousemove(pos[0] + bounce, pos[1] - bounce)
                        time.sleep(2)

            elif pos[0] == rt:
                if BOTTOM_RIGHT_COMMAND:
                    time.sleep(second_sleep)
                    pos = mousepos()
                    if pos[0] == rt and pos[1] == bt:
                        mousemove(pos[0] - bounce, pos[1] - bounce)
                        os.system("({}) &".format(BOTTOM_RIGHT_COMMAND))
                        mousemove(pos[0] - bounce, pos[1] - bounce)
                        time.sleep(2)

