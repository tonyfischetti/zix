#!/usr/local/bin/lispscript
; vi: ft=lisp


(defparams *input-files*    *num-of-files*    *output-dir*
           *dry-run*        *quality*         *echo*
           *verbose*        *not-265*         *scaling*
           *clobber-p*      *num-threads*)

(setq *output-dir*  ".")
(setq *echo*        t)


(def-cli-args "mpfour-encode" "-[hdncE] [-o OUTPUT-DIR] [-s SCALING-PARAM] list-of-files"
  "Uses ffmpeg to re-encode a video file to mp4 (with options)
   MAKE SURE YOU RUN `clean-name` on all files before attempting this"
  (option "-h" "--help" "print usage"
          (print-usage!))
  (option "-o" "--output-dir" "specify output directory"
          (setq *output-dir* (cadr args!))
          (process-args! (cddr args!)))
  (option "-d" "--dry-run" "perform a dry run"
           (setq *dry-run* t)
           (process-args! (cdr args!)))
  (option "-n" "--no-265" "don't use libx265 codec"
           (setq *not-265* t)
           (process-args! (cdr args!)))
  (option "-s" "--scaling" "reduce scale by this factor (default = no scaling)"
           (setq *scaling* (cadr args!))
           (process-args! (cddr args!)))
  (option "-t" "--threads" "number of threads to use"
           (setq *num-threads* (parse-integer (cadr args!)))
           (process-args! (cddr args!)))
  (option "-c" "--clobber" "overwrite original file or delete old file (if not mp4)"
           (setq *clobber-p* t)
           (process-args! (cdr args!)))
  (option "-E" "--no-echo" "turn off ffmpeg command echo"
          (setq *echo* nil)
          (process-args! (cdr args!))))


(process-args! (cdr (cmdargs)))


« (setq *input-files* Ø bare-args!) or die "No input files" »
(setq *num-of-files* (length *input-files*))


(defun change-to-mp4-fn (afile)
  (format nil "~A.mp4" (remove-extension afile)))


(defun make-conv-command (afile tmp-name scaling)
  (format nil •ffmpeg -i "~A" ~A ~A -max_muxing_queue_size 9999 ~A "~A" -loglevel error•
          afile
          (if *not-265* "" "-vcodec libx265")
          (if *scaling* (format nil •-vf scale="iw/~A:ih/~A"• scaling scaling) "")
          (if *num-threads* (fn "-threads ~A" *num-threads*) "")
          tmp-name))


(defun perform-trick (afile)
  (let* ((tmp-name         (format nil "tmp~A.mp4" (get-universal-time)))
         (new-name         (format nil "~A/~A" *output-dir* (change-to-mp4-fn afile)))
         (conv-command     (make-conv-command afile tmp-name *scaling*))
         (original-size    (file-size afile))
         (original-size-b  (file-size afile :just-bytes t))
         (new-size         nil)
         (new-size-b       nil)
         (elapsed          nil)
         (exists-p         (probe-file new-name)))
    (when (and exists-p (not *clobber-p*))
      (progn
        (format t "~%File exists so the output file will remain ~A~%" tmp-name)
        (setq new-name tmp-name)))
    (format t "~%Converting ~A now (~A)    [~A]~%" afile original-size (get-current-time))
    (with-time
      (zsh conv-command :echo *echo* :dry-run *dry-run*)
      (setq elapsed time!))
    (setq ended (get-universal-time))
    (when (not (string= tmp-name new-name))
      (zsh (format nil •mv "~A" "~A"• tmp-name new-name) :echo *echo* :dry-run *dry-run*))
    (when (and *clobber-p* (not (string= (change-to-mp4-fn afile) afile)))
      (zsh (format nil •rm "~A"• afile) :echo *echo* :dry-run *dry-run*))
    (setq new-size    (file-size new-name))
    (setq new-size-b  (file-size new-name :just-bytes t))
    (format t "Done~%~A -> ~A (~A%)~%~A~%~%~%"
            original-size new-size
            (round (* 100 (/ new-size-b original-size-b)))
            (time-for-humans elapsed))))


(for-each *input-files*
  (progress index! *num-of-files*)
  « (perform-trick value!)
      or warn (format nil "FAILURE!!!!...~%~S" ERROR!) »)



; vi: ft=lisp


